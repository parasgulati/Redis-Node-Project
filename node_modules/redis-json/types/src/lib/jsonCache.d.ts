import { IJSONCache, IOptions, ISetOptions, IObj } from './interfaces';
export default class JSONCache implements IJSONCache {
    private redisClient;
    private options;
    /**
     * Intializes JSONStore instance
     * @param redisClient IORedis client
     * @param options Options for controlling the prefix
     */
    constructor(redisClient: any, options?: IOptions);
    /**
     * Flattens the given json object and
     * stores it in Redis hashset
     *
     * @param key Redis key
     * @param obj JSON object to be stored
     * @param options
     */
    set(key: string, obj: IObj, options?: ISetOptions): Promise<any>;
    /**
     * Retrieves the hashset from redis and
     * unflattens it back to the original Object
     *
     * @param key Redis key
     * @param ring} fields List of fields to be retreived from redis.
     *    This helps reduce network latency incase only a few fields are
     *    needed.
     *
     * @returns request object from the cache
     */
    get(key: string, ...fields: string[]): Promise<IObj | undefined>;
    /**
     * Replace the entire hashset for the given key
     *
     * @param key Redis key
     * @param obj JSON Object
     */
    rewrite(key: string, obj: IObj): Promise<any>;
    /**
     * Removes/deletes all the keys in the JSON Cache,
     * having the prefix.
     */
    clearAll(): Promise<any>;
    /******************
     * PRIVATE METHODS
     ******************/
    private getKey;
}
